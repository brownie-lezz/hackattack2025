from flask import Blueprint, request, jsonify
import logging
import traceback

logger = logging.getLogger(__name__)

# Create Blueprint for job routes
job_routes = Blueprint('job_routes', __name__)

# Try to import ML service
try:
    from ml_model.salary_service import prediction_service
    ml_available = True
    logger.info("ML service imported successfully")
except ImportError as e:
    # Fallback to the basic prediction service
    try:
        from ml_model.fallback_service import fallback_service as prediction_service
        ml_available = True
        logger.warning("Using fallback prediction service due to ML import error")
    except ImportError:
        prediction_service = None
        ml_available = False
        logger.error("Failed to import both ML service and fallback service")
    logger.error(f"Failed to import ML service: {e}")

@job_routes.route('/api/jobs/salary-prediction', methods=['POST'])
def predict_salary():
    """
    API endpoint for salary prediction
    """
    # Check if ML is available
    if not ml_available:
        return jsonify({
            "success": False,
            "error": "ML functionality not available",
            "fallback": True
        }), 503  # Service Unavailable
        
    try:
        # Get data from the request
        data = request.json
        
        # Format the request data for the ML model
        ml_request_data = {
            "title": data.get('title', ''),
            "location": data.get('location', 'Remote'),
            "formatted_work_type": data.get('workType', 'Full-time'),
            "formatted_experience_level": data.get('experienceLevel', 'Entry level'),
            "company_industries": data.get('industry', 'Technology'),
            "skill_requirement": ', '.join(data.get('skills', [])),
            "education_requirement": data.get('education', ''),
            "certification_requirement": data.get('certification', ''),
            "experience_requirement": data.get('experience', ''),
            "remote_allowed": data.get('remote', False),
            "company_employee_count": data.get('companySize', 500),
            "as_monthly": data.get('as_monthly', True)
        }
        
        # Get prediction from the service
        result = prediction_service.predict(ml_request_data)
        return jsonify(result)
            
    except Exception as e:
        logger.error(f"Error predicting salary: {e}")
        traceback.print_exc()
        return jsonify({
            "success": False,
            "error": str(e),
            "fallback": True
        }), 500


@job_routes.route('/api/jobs/similar-jobs', methods=['POST'])
def get_similar_jobs():
    """
    API endpoint for similar jobs
    """
    # Check if ML is available
    if not ml_available:
        return jsonify({
            "success": False,
            "error": "ML functionality not available",
            "fallback": True
        }), 503  # Service Unavailable
        
    try:
        # Get data from the request
        data = request.json
        
        # Prepare request data
        request_data = {
            "title": data.get('title', ''),
            "location": data.get('location', 'Remote'),
            "skills": data.get('keywords', '').split(', ') if isinstance(data.get('keywords'), str) else [],
            "type": data.get('workType', 'Full-time')
        }
        
        # Get similar jobs from the service
        similar_jobs = prediction_service.get_similar_jobs(request_data)
        return jsonify(similar_jobs)
            
    except Exception as e:
        logger.error(f"Error getting similar jobs: {e}")
        traceback.print_exc()
        return jsonify({
            "success": False,
            "error": str(e),
            "fallback": True
        }), 500


@job_routes.route('/api/jobs/create', methods=['POST'])
def create_job():
    """
    API endpoint for job creation
    """
    try:
        # Get data from the request
        job_data = request.json
        
        # Here you would typically save the job to a database
        # For now, we'll just return the job data with a mock ID
        job_data['id'] = '12345'  # In production, this would be generated by the database
        
        return jsonify({
            "success": True,
            "message": "Job created successfully",
            "job": job_data
        })
            
    except Exception as e:
        logger.error(f"Error creating job: {e}")
        traceback.print_exc()
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500 